using UnityEngine;

public class RocketBehaviour : MonoBehaviour
{
    private Transform target;
    private float speed = 15.0f;
    private bool homing;
    private float rocketStrength = 15.0f;
    private float aliveTimer = 5.0f;

    // Update is called once per frame
    void Update()
    {
        if (homing && target != null)
        {
            // Vector3.Normalize
            // Makes this vector have a magnitude of 1. When normalized, a vector keeps the same direction but its length is 1.0.
            Vector3 moveDirection = (target.transform.position - transform.position).normalized;
            transform.position += moveDirection * speed * Time.deltaTime;

            // Transform.LookAt
            // Rotates the transform so the forward vector points at target's current position.
            transform.LookAt(target);
        }
    }

    public void Fire(Transform newTarget)
    {
        this.target = newTarget;
        this.homing = true;
        Destroy(this.gameObject, this.aliveTimer);
    }

    void OnCollisionEnter(Collision collision)
    {
        if (target != null)
        {
            if (collision.gameObject.CompareTag(target.tag))
            {
                Rigidbody targetRigidbody = collision.gameObject.GetComponent<Rigidbody>();

                // We use the "normal" of the collision contact to determine which direction to push the target in.
                // The contact points generated by the physics engine. You should avoid using this as it produces memory garbage.
                // Use GetContact or GetContacts instead. Every contact contains a contact point, normal and the two colliders that collided.
                // From inside OnCollisionStay(...) or OnCollisionEnter(...) you can always be sure that contacts has at least one element.
                Vector3 away = -collision.contacts[0].normal;
                targetRigidbody.AddForce(away * rocketStrength, ForceMode.Impulse);
                Destroy(gameObject);
            }
        }
    }
}
